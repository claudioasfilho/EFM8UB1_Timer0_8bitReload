C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WAR
                    -NINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\clfilho\Dropbo
                    -x (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v
                    -3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1;C:/SiliconLabs/S
                    -implicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65
                    -) OBJECT(.\src\Dali.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          bit MDone;
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 2   

  51          bit MOutput;
  52          bit DaliStopFlag;
  53          
  54          
  55          
  56          /*********************************************************************************
  57           *********************************************************************************
  58                                                   Manchester Encoder Related Functions
  59           *********************************************************************************
  60           *********************************************************************************/
  61          
  62          
  63          /*Manchester Decoder Busy Flag Getters and Setters*/
  64          
  65          void SetBusyFlag()
  66          {
  67   1              MDone=1;
  68   1      }
  69          
  70          void ClearBusyFlag()
  71          {
  72   1              MDone=0;
  73   1      }
  74          
  75          bit GetBusyFlag()
  76          {
  77   1       return MDone;
  78   1      }
  79          
  80          /*Manchester Decoder Output Flag Getters and Setters*/
  81          
  82          void SetMDOutput()
  83          {
  84   1              MOutput =1;
  85   1      }
  86          
  87          void ClearMDOutput()
  88          {
  89   1              MOutput =0;
  90   1      }
  91          
  92          bit GetMDOutput()
  93          {
  94   1       return MOutput;
  95   1      }
  96          SI_SBIT (LED2,SFR_P1, 4);                          //PB0 Switch Definition
  97          
  98          void ManchesterEncoder (uint8_t input)
  99          {
 100   1              static BITS_BYTE Input;
 101   1      
 102   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 103   1      
 104   1              ClearBusyFlag();
 105   1      
 106   1              if (counter==8)
 107   1              {
 108   2                      Input.Abyte = input;
 109   2              }
 110   1      
 111   1              while (counter>=0)
 112   1              {
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 3   

 113   2                      while(GetBusyFlag()==1);
 114   2      
 115   2                      if (GetBusyFlag()==0)
 116   2                      {
 117   3                              switch (counter--){
 118   4      
 119   4                                                              case 0: //SetBusyFlag();
 120   4                                                              break;
 121   4                                                              case 1: MOutput = Input.nybble.BB0;
 122   4                                                              SetBusyFlag();
 123   4                                                              break;
 124   4                                                              case 2: MOutput = Input.nybble.BB1;
 125   4                                                              SetBusyFlag();
 126   4                                                              break;
 127   4                                                              case 3: MOutput = Input.nybble.BB2;
 128   4                                                              SetBusyFlag();
 129   4                                                              break;
 130   4                                                              case 4: MOutput = Input.nybble.BB3;
 131   4                                                              SetBusyFlag();
 132   4                                                              break;
 133   4                                                              case 5: MOutput = Input.nybble.BB4;
 134   4                                                              SetBusyFlag();
 135   4                                                              break;
 136   4                                                              case 6: MOutput = Input.nybble.BB5;
 137   4                                                              SetBusyFlag();
 138   4                                                              break;
 139   4                                                              case 7: MOutput = Input.nybble.BB6;
 140   4                                                              SetBusyFlag();
 141   4                                                              break;
 142   4                                                              case 8: MOutput = Input.nybble.BB7;
 143   4                                                              SetBusyFlag();
 144   4                                                              break;
 145   4                                      }
 146   3      
 147   3      
 148   3                      }
 149   2      
 150   2              }
 151   1      
 152   1              counter=8;
 153   1      
 154   1      }
 155          
 156          
 157          
 158          void DaliTxHandler()
 159          {
 160   1              static uint8_t counter = 0;
 161   1              static uint8_t evcounter = 0;
 162   1      
 163   1              if (GetBusyFlag())
 164   1              {
 165   2                      if (evcounter++==15)
 166   2                              {evcounter=0;}
 167   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
 168   2                      {
 169   3      
 170   3                              //The next lines implement the two steps of the Manchester Decoding
 171   3                              if (counter==0)                                 //Process First Part of the Byte
 172   3                              {
 173   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 174   4                                      else ClearDaliOutputPin();
 175   4                                      counter++;
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 4   

 176   4                              }
 177   3                              else
 178   3                              {                                                               //Process 2nd Part of the Byte
 179   4      
 180   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 181   4                                      else SetDaliOutputPin();
 182   4                                      counter=0;
 183   4      
 184   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 185   4                              }
 186   3      
 187   3                      }
 188   2                      else                            //Yes, This is the Stop bits stage
 189   2                              {
 190   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 191   3                                      else{
 192   4                                                      SetDaliOutputPin();             //The Line is normally High;
 193   4                                                      counter=0;
 194   4                                                      ClearDaliStopFlag();
 195   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 196   4                                              }
 197   3                              }
 198   2                      }
 199   1      
 200   1      }
 201          /*********************************************************************************
 202           *********************************************************************************
 203                                                   Dali TX Related Functions
 204           *********************************************************************************
 205           *********************************************************************************/
 206          
 207          
 208          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 209          {
 210   1              TH0 = reloadH;
 211   1              TL0 = reloadL;
 212   1      }
 213          
 214          
 215          void StartDaliTxTimer()
 216          {
 217   1      
 218   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 219   1      }
 220          
 221          
 222          uint16_t GetDaliTxTimer()
 223          {
 224   1              return TH0|TL0;
 225   1      }
 226          
 227          
 228          void StopDaliTxTimer()
 229          {
 230   1      
 231   1              TH1 = 0;
 232   1              TL1 = 0;
 233   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 234   1      }
 235          
 236          
 237          void DaliFrameStart()
 238          {
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 5   

 239   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 240   1              SetMDOutput();
 241   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 242   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 243   1      
 244   1      }
 245          
 246          void DaliFrameStop()
 247          {
 248   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 249   1              SetDaliStopFlag();
 250   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 251   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 252   1      
 253   1      }
 254          
 255          void DaliTXStateMachine(uint8_t address, uint8_t Ddata)
 256          {
 257   1              DALI_TXFRAME States;
 258   1      
 259   1              SetDaliOutputPin();                     //The Line is Normally High
 260   1              States = START;
 261   1      
 262   1              while (States<END)
 263   1              {
 264   2                      switch (States)
 265   2                      {
 266   3                              case START: {
 267   4                                                              DaliFrameStart();
 268   4                                                              States= ADDRESS;
 269   4                                                              break;
 270   4                                                      }
 271   3      
 272   3                              case ADDRESS: {
 273   4                                                              ManchesterEncoder(address);
 274   4                                                              States= DATA;
 275   4                                                              break;
 276   4                                                      }
 277   3      
 278   3                              case DATA: {
 279   4                                                              ManchesterEncoder(Ddata);
 280   4                                                              States= STOP;
 281   4                                                              break;
 282   4                                                      }
 283   3      
 284   3                              case STOP: {
 285   4                                                              DaliFrameStop();
 286   4                                                              States= END;
 287   4                                                              break;
 288   4                                                      }
 289   3      
 290   3                      }
 291   2              }
 292   1      
 293   1      }
 294          /*Dali Stop bit Flag Getters and Setters*/
 295          
 296          void SetDaliStopFlag()
 297          {
 298   1              DaliStopFlag =1;
 299   1      }
 300          
 301          void ClearDaliStopFlag()
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 6   

 302          {
 303   1              DaliStopFlag =0;
 304   1      }
 305          
 306          bit GetDaliStopFlag()
 307          {
 308   1       return DaliStopFlag;
 309   1      }
 310          
 311          
 312          void SetDaliOutputPin()
 313          {
 314   1              DALI_OUT=1;
 315   1      }
 316          
 317          void ClearDaliOutputPin()
 318          {
 319   1              DALI_OUT=0;
 320   1      }
 321          
 322          bit GetDaliOutputPin()
 323          {
 324   1       return DALI_OUT;
 325   1      }
 326          
 327          
 328          /*********************************************************************************
 329           *********************************************************************************
 330                                                   Dali RX Related Functions
 331           *********************************************************************************
 332           *********************************************************************************/
 333          uint8_t BusQuietCounter;
 334          
 335          bit GetDaliIntputPin()
 336          {
 337   1       return DALI_IN;
 338   1      }
 339          
 340          void EnableDaliRxTimerInt()
 341          {
 342   1              IE |= IE_ET1__ENABLED;
 343   1      }
 344          
 345          void DisableDaliRxTimerInt()
 346          {
 347   1              IE &= 0xf7;
 348   1      }
 349          
 350          
 351          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 352          {
 353   1              TH1 = reloadH;
 354   1              TL1 = reloadL;
 355   1      }
 356          
 357          void StartDaliRxTimer()
 358          {
 359   1      
 360   1              TH1 = 0;
 361   1              TL1 = 0;
 362   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 363   1      }
 364          
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 7   

 365          
 366          uint16_t GetDaliRxTimer()
 367          {
 368   1              return TH1|TL1;
 369   1      }
 370          
 371          
 372          void StopDaliRxTimer()
 373          {
 374   1      
 375   1              TH1 = 0;
 376   1              TL1 = 0;
 377   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 378   1      }
 379          
 380          void QueryDaliBus()
 381          {
 382   1              static counter=0;
 383   1      
 384   1              if ((GetDaliIntputPin()==1) && (counter++==3))
 385   1              {
 386   2                      counter=0;
 387   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 388   2              }
 389   1              if (GetDaliIntputPin()==0)
 390   1              {
 391   2                      counter=0;
 392   2                      ClearBusQuietCounter();
 393   2              }
 394   1      }
 395          
 396          
 397          void IncBusQuietCounter()
 398          {
 399   1              BusQuietCounter++;
 400   1      }
 401          
 402          void ClearBusQuietCounter()
 403          {
 404   1              BusQuietCounter=0;
 405   1      }
 406          
 407          uint8_t GetBusQuietCounter()
 408          {
 409   1              return BusQuietCounter;
 410   1      }
 411          
 412          
 413          void SetDaliInputPinPolarity (INTPOLARITY input)
 414          {
 415   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 416   1              else IT01CF &=0x7f;
 417   1      }
 418          
 419          
 420          void EnableInt1 ()
 421          {
 422   1              IE |= 0x4;
 423   1      }
 424          
 425          void DisableInt1 ()
 426          {
 427   1              IE &= 0xfb;
C51 COMPILER V9.53.0.0   DALI                                                              03/07/2016 12:54:07 PAGE 8   

 428   1      }
 429          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    515    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
