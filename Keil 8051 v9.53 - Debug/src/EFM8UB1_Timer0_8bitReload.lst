C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8UB1_TIMER0_8BITRELOAD
OBJECT MODULE PLACED IN .\src\EFM8UB1_Timer0_8bitReload.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\EFM8UB1_Timer0_8bitReload.c OMF2 SMALL DEBUG OBJECT
                    -EXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:
                    -\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\inc;C:/SiliconLabs/SimplicityStudio/v3/de
                    -veloper/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM
                    -8UB1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc) PRINT(.\src\EFM8UB1_Timer0_8bitRel
                    -oad.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8UB1_Timer0_8bitReload.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8UB1_Timer0_8bitReload.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value.
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          /*
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 2   

  51          bit MDone;
  52          bit MOutput;
  53          bit DaliStopFlag;
  54          */
  55          
  56          //-----------------------------------------------------------------------------
  57          // Pin Definitions
  58          //-----------------------------------------------------------------------------
  59          /*SI_SBIT (DISP_EN, SFR_P2, 3);          // Display Enable
  60          
  61          SI_SBIT (PB0_SW,SFR_P0, 2);                        //PB0 Switch Definition
  62          SI_SBIT (DALI_OUT, SFR_P0, 0);             //Dali Output Pin
  63          SI_SBIT (DALI_IN, SFR_P0, 3);              //Dali Input Pin*/
  64          
  65          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  66          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  67          
  68          //-----------------------------------------------------------------------------
  69          // Main Routine
  70          //-----------------------------------------------------------------------------
  71          void main (void)
  72          {
  73   1              uint8_t test=0;
  74   1      
  75   1              uint16_t fcounter;
  76   1         enter_DefaultMode_from_RESET();
  77   1      
  78   1         DISP_EN = DISP_BC_DRIVEN;                    // EFM8 does not drive display
  79   1      
  80   1         IE_EA = 1;                                   // Enable global interrupts
  81   1         PRTDRV |=0x1;                                                        //Enable high drive strength on P0
  82   1         SetDaliInputPinPolarity(ACTIVE_LOW);
  83   1      
  84   1         while (1) {
  85   2                 DALI_OUT=1;
  86   2                 if (PB0_SW==0) {
  87   3                         //ManchesterEncoder(0xf0);
  88   3                         DaliTXStateMachine(0xf0, 0xf0);
  89   3                         for(fcounter=0; fcounter<0xfff; fcounter++);
  90   3                 }
  91   2      
  92   2         }
  93   1      
  94   1      
  95   1      }
  96          
  97          
  98          #if 0
              
              /*********************************************************************************
               *********************************************************************************
                                                       Manchester Encoder Related Functions
               *********************************************************************************
               *********************************************************************************/
              
              
              /*Manchester Decoder Busy Flag Getters and Setters*/
              
              void SetBusyFlag()
              {
                      MDone=1;
              }
              
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 3   

              void ClearBusyFlag()
              {
                      MDone=0;
              }
              
              bit GetBusyFlag()
              {
               return MDone;
              }
              
              /*Manchester Decoder Output Flag Getters and Setters*/
              
              void SetMDOutput()
              {
                      MOutput =1;
              }
              
              void ClearMDOutput()
              {
                      MOutput =0;
              }
              
              bit GetMDOutput()
              {
               return MOutput;
              }
              SI_SBIT (LED2,SFR_P1, 4);                          //PB0 Switch Definition
              
              void ManchesterEncoder (uint8_t input)
              {
                      static BITS_BYTE Input;
              
                      static int8_t counter = 7;
              
                      ClearBusyFlag();
              
                      if (counter==7)
                      {
                              Input.Abyte = input;
                      }
              
                      while (counter>=0)
                      {
                              while(GetBusyFlag()==1);
              
                              if (GetBusyFlag()==0)
                              {
                                      switch (counter){
              
                                                                      case 0: MOutput = Input.nybble.BB0;
                                                                      break;
                                                                      case 1: MOutput = Input.nybble.BB1;
                                                                      break;
                                                                      case 2: MOutput = Input.nybble.BB2;
                                                                      break;
                                                                      case 3: MOutput = Input.nybble.BB3;
                                                                      break;
                                                                      case 4: MOutput = Input.nybble.BB4;
                                                                      break;
                                                                      case 5: MOutput = Input.nybble.BB5;
                                                                      break;
                                                                      case 6: MOutput = Input.nybble.BB6;
                                                                      break;
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 4   

                                                                      case 7: MOutput = Input.nybble.BB7;
                                                                      break;
                                              }
              
                                      if (counter-->=0)       SetBusyFlag();
              
              
                              }
              
                      }
              
                      counter=7;
              
              }
              
              /*********************************************************************************
               *********************************************************************************
                                                       Dali TX Related Functions
               *********************************************************************************
               *********************************************************************************/
              
              
              void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
              {
                      TH0 = reloadH;
                      TL0 = reloadL;
              }
              
              
              void StartDaliTxTimer()
              {
              
                      TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
              }
              
              
              uint16_t GetDaliTxTimer()
              {
                      return TH0|TL0;
              }
              
              
              void StopDaliTxTimer()
              {
              
                      TH1 = 0;
                      TL1 = 0;
                      TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
              }
              
              
              void DaliFrameStart()
              {
                      ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
                      SetMDOutput();
                      SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
                      while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
              
              }
              
              void DaliFrameStop()
              {
                      ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 5   

                      SetDaliStopFlag();
                      SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
                      while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
              
              }
              
              void DaliTXStateMachine(uint8_t address, uint8_t Ddata)
              {
                      DALI_TXFRAME States;
              
                      SetDaliOutputPin();                     //The Line is Normally High
                      States = START;
              
                      while (States<END)
                      {
                              switch (States)
                              {
                                      case START: {
                                                                      DaliFrameStart();
                                                                      States= ADDRESS;
                                                                      break;
                                                              }
              
                                      case ADDRESS: {
                                                                      ManchesterEncoder(address);
                                                                      States= DATA;
                                                                      break;
                                                              }
              
                                      case DATA: {
                                                                      ManchesterEncoder(Ddata);
                                                                      States= STOP;
                                                                      break;
                                                              }
              
                                      case STOP: {
                                                                      DaliFrameStop();
                                                                      States= END;
                                                                      break;
                                                              }
              
                              }
                      }
              
              }
              /*Dali Stop bit Flag Getters and Setters*/
              
              void SetDaliStopFlag()
              {
                      DaliStopFlag =1;
              }
              
              void ClearDaliStopFlag()
              {
                      DaliStopFlag =0;
              }
              
              bit GetDaliStopFlag()
              {
               return DaliStopFlag;
              }
              
              
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 6   

              void SetDaliOutputPin()
              {
                      DALI_OUT=1;
              }
              
              void ClearDaliOutputPin()
              {
                      DALI_OUT=0;
              }
              
              bit GetDaliOutputPin()
              {
               return DALI_OUT;
              }
              
              void DaliTxHandler()
              {
                      static uint8_t counter = 0;
                      static uint8_t evcounter = 0;
              
                      if (GetBusyFlag())
                      {
                              if (evcounter++==15)
                                      {evcounter=0;}
                              if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
                              {
              
                                      //The next lines implement the two steps of the Manchester Decoding
                                      if (counter==0)                                 //Process First Part of the Byte
                                      {
                                              if (GetMDOutput()==0) SetDaliOutputPin();
                                              else ClearDaliOutputPin();
                                              counter++;
                                      }
                                      else
                                      {                                                               //Process 2nd Part of the Byte
              
                                              if (GetMDOutput()==0) ClearDaliOutputPin();
                                              else SetDaliOutputPin();
                                              counter=0;
              
                                              ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
                                      }
              
                              }
                              else                            //Yes, This is the Stop bits stage
                                      {
                                              if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cyscles of the Timer
                                              else{
                                                              SetDaliOutputPin();             //The Line is normally High;
                                                              counter=0;
                                                              ClearDaliStopFlag();
                                                              ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
                                                      }
                                      }
                              }
              
              }
              
              /*********************************************************************************
               *********************************************************************************
                                                       Dali RX Related Functions
               *********************************************************************************
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 7   

               *********************************************************************************/
              uint8_t BusQuietCounter;
              
              bit GetDaliIntputPin()
              {
               return DALI_IN;
              }
              
              void EnableDaliRxTimerInt()
              {
                      IE |= IE_ET1__ENABLED;
              }
              
              void DisableDaliRxTimerInt()
              {
                      IE &= 0xf7;
              }
              
              
              void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
              {
                      TH1 = reloadH;
                      TL1 = reloadL;
              }
              
              void StartDaliRxTimer()
              {
              
                      TH1 = 0;
                      TL1 = 0;
                      TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
              }
              
              
              uint16_t GetDaliRxTimer()
              {
                      return TH1|TL1;
              }
              
              
              void StopDaliRxTimer()
              {
              
                      TH1 = 0;
                      TL1 = 0;
                      TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
              }
              
              void QueryDaliBus()
              {
                      static counter=0;
              
                      if ((GetDaliIntputPin()==1) && (counter++==3))
                      {
                              counter=0;
                              if(GetBusQuietCounter()<=254) IncBusQuietCounter();
                      }
                      if (GetDaliIntputPin()==0)
                      {
                              counter=0;
                              ClearBusQuietCounter();
                      }
              }
C51 COMPILER V9.53.0.0   EFM8UB1_TIMER0_8BITRELOAD                                         03/07/2016 11:50:09 PAGE 8   

              
              
              void IncBusQuietCounter()
              {
                      BusQuietCounter++;
              }
              
              void ClearBusQuietCounter()
              {
                      BusQuietCounter=0;
              }
              
              uint8_t GetBusQuietCounter()
              {
                      return BusQuietCounter;
              }
              
              
              void SetDaliInputPinPolarity (INTPOLARITY input)
              {
                      if (input==ACTIVE_HIGH) IT01CF |= 0x80;
                      else IT01CF &=0x7f;
              }
              
              
              void EnableInt1 ()
              {
                      IE |= 0x4;
              }
              
              void DisableInt1 ()
              {
                      IE &= 0xfb;
              }
              
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     56    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
