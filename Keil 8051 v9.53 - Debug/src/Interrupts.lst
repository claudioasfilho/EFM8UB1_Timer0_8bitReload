C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/09/2016 10:40:37 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARG
                    -E) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\clfilho\
                    -Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si
                    -8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1;C:/Silicon
                    -Labs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc) PRINT(.\src\Interrupts.lst) COND PAGEWIDTH(120) P
                    -AGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8UB1_Register_Enums.h>
  12          #include "InitDevice.h"
  13          #include "Dali.h"
  14          
  15          //extern bit MDone;
  16          //extern bit MOutput;
  17          
  18          //-----------------------------------------------------------------------------
  19          // Global Constants
  20          //-----------------------------------------------------------------------------
  21          // Configurator set for HFOSC0/8
  22          #define SYSCLK             3062000
  23          
  24          static xdata DALI_TXFRAME State = START;
  25          //static xdata uint8_t bitCounter = 0;
  26          //static xdata uint8_t daliRXOutput=0;
  27          bit _1stHalf;
  28          bit _2ndHalf;
  29          
  30          SI_SBIT (LED2,SFR_P1, 4);                          //PB0 Switch Definition
  31          
  32          
  33          
  34          //-----------------------------------------------------------------------------
  35          // INT1_ISR
  36          //-----------------------------------------------------------------------------
  37          //
  38          // TIMER0 ISR Content goes here. Remember to clear flag bits:
  39          // TCON::TF0 (Timer 0 Overflow Flag)
  40          //
  41          // Here we process the Timer0 interrupt and toggle the LED when appropriate
  42          //
  43          //-----------------------------------------------------------------------------
  44          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
  45          {
  46   1         static xdata uint8_t intcounter = 0;
  47   1      
  48   1         //if((GetDaliIntputPin()==0) &&(intcounter==0))
  49   1              if((GetBusQuietCounter()>1)&&(GetDaliIntputPin()==0) &&(intcounter==0))
  50   1              {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/09/2016 10:40:37 PAGE 2   

  51   2      
  52   2                      _1stHalf=GetDaliIntputPin();
  53   2                      SetDaliInputPinPolarity(ACTIVE_HIGH);
  54   2      
  55   2              }
  56   1      
  57   1              if ((intcounter++==1))
  58   1              {
  59   2                      _2ndHalf=GetDaliIntputPin();
  60   2                      SetDaliInputPinPolarity(ACTIVE_LOW);
  61   2      
  62   2                      if ((_1stHalf==0) && (_2ndHalf==1))// && (GetDaliRxErrorFlag()==0))                     // Start bit received
  63   2                              {
  64   3                                      DisableInt1 ();
  65   3                                      StopDaliRxTimer();
  66   3      
  67   3                                      //It will reload a one period worth of time, so it will start sampling on the next bit
  68   3                                      ReloadDaliRxTimer(TMH, TML);
  69   3                                      EnableDaliRxTimerInt();
  70   3                                      StartDaliRxTimer();
  71   3                                      State = DATA;
  72   3      
  73   3                              }
  74   2                      intcounter=0;
  75   2                      _1stHalf = _2ndHalf =0;
  76   2              }
  77   1      
  78   1      
  79   1      }
  80          
  81          
  82          //-----------------------------------------------------------------------------
  83          // TIMER1_ISR
  84          //-----------------------------------------------------------------------------
  85          //
  86          // TIMER1 ISR Content goes here. Remember to clear flag bits:
  87          // TCON::TF1 (Timer 0 Overflow Flag)
  88          //
  89          // Here we process the Timer dedicated to Dali RX
  90          //
  91          //-----------------------------------------------------------------------------
  92          SI_INTERRUPT (TIMER1_ISR, TIMER1_IRQn)
  93          {
  94   1      
  95   1      
  96   1      static xdata uint8_t sampleCounter = 0;
  97   1      static xdata uint8_t bitsCounter = 7;
  98   1      xdata uint8_t buffer[8];
  99   1      xdata uint8_t BitBuffer[72];
 100   1      bit input;
 101   1      bit outputbit;
 102   1      xdata BITS_BYTE sample;
 103   1      xdata BITS_BYTE DataOutput;
 104   1      
 105   1      static xdata uint8_t Bunter=0;
 106   1      
 107   1              ReloadDaliRxTimer(STMH, STML);
 108   1              //input = GetDaliIntputPin();
 109   1      
 110   1      
 111   1              //This state machine makes sure the Rx handler is in the right State
 112   1              switch (State)
 113   1      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/09/2016 10:40:37 PAGE 3   

 114   1                      {
 115   2      
 116   2                              case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 117   2                                              {
 118   3                                                      break;
 119   3                                              }
 120   2      
 121   2                              case DATA:
 122   2                                              {
 123   3      /*                                              //This state machine counts samples and store them to the sample struct
 124   3                                                      switch (sampleCounter++)
 125   3                                                      {
 126   3                                                      //Reading the First Half of the bit, 1st interaction
 127   3                                                              case 0:
 128   3                                                                              {
 129   3                                                                                      sample.nybble.BB0 = input;
 130   3                                                                                      break;
 131   3                                                                              }
 132   3                                                      //Reading the First Half of the bit, 2nd interaction
 133   3                                                              case 1:
 134   3                                                                              {
 135   3                                                                                      sample.nybble.BB1 = input;
 136   3                                                                                      break;
 137   3                                                                              }
 138   3                                                      //Reading the Second Half of the bit, 1st interaction
 139   3                                                              case 2:
 140   3                                                                              {
 141   3                                                                                      sample.nybble.BB4 = input;
 142   3                                                                                      break;
 143   3                                                                              }
 144   3                                                      //Reading the Second Half of the bit, 2nd interaction
 145   3                                                              case 3:
 146   3                                                                              {
 147   3                                                                                      sample.nybble.BB5 = input;
 148   3      
 149   3                                                                                      // Logic 1 received
 150   3                                                                                      if (sample.Abyte==0x30) outputbit =1;
 151   3                                                                                      // Logic 0 received
 152   3                                                                                      else if (sample.Abyte==0x03) outputbit =0;
 153   3      
 154   3                                                                                      //This state machine places the bit in the right bit location on the DataOutput Structure
 155   3                                                                                      switch (bitsCounter--)
 156   3                                                                                      {
 157   3                                                                                              case 0:
 158   3                                                                                                              {
 159   3                                                                                                                      DataOutput.nybble.BB0 = outputbit;
 160   3                                                                                                                      bitsCounter=8;
 161   3                                                                                                                      break;
 162   3                                                                                                              }
 163   3                                                                                              case 1:
 164   3                                                                                                              {
 165   3                                                                                                                      DataOutput.nybble.BB1 = outputbit;
 166   3                                                                                                                      break;
 167   3                                                                                                              }
 168   3                                                                                              case 2:
 169   3                                                                                                              {
 170   3                                                                                                                      DataOutput.nybble.BB2 = outputbit;
 171   3                                                                                                                      break;
 172   3                                                                                                              }
 173   3                                                                                              case 3:
 174   3                                                                                                              {
 175   3                                                                                                                      DataOutput.nybble.BB3 = outputbit;
 176   3                                                                                                                      break;
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/09/2016 10:40:37 PAGE 4   

 177   3                                                                                                              }
 178   3                                                                                              case 4:
 179   3                                                                                                              {
 180   3                                                                                                                      DataOutput.nybble.BB4 = outputbit;
 181   3                                                                                                                      break;
 182   3                                                                                                              }
 183   3                                                                                              case 5:
 184   3                                                                                                              {
 185   3                                                                                                                      DataOutput.nybble.BB5 = outputbit;
 186   3                                                                                                                      break;
 187   3                                                                                                              }
 188   3                                                                                              case 6:
 189   3                                                                                                              {
 190   3                                                                                                                      DataOutput.nybble.BB6 = outputbit;
 191   3                                                                                                                      break;
 192   3                                                                                                              }
 193   3                                                                                              case 7:
 194   3                                                                                                              {
 195   3                                                                                                                      DataOutput.nybble.BB7 = outputbit;
 196   3                                                                                                                      break;
 197   3                                                                                                              }
 198   3                                                                                      }
 199   3      
 200   3      
 201   3      
 202   3                                                                                      break;
 203   3                                                                              }
 204   3      
 205   3                                                      }//End of switch (sampleCounter++)
 206   3      
 207   3      */                                              LED2^=1;
 208   3                                                      BitBuffer[Bunter++] = GetDaliIntputPin();
 209   3                                                      if (Bunter==72)
 210   3                                                      {
 211   4                                                              Bunter=0;
 212   4                                                              DisableDaliRxTimerInt();
 213   4                                                              SetDaliInputPinPolarity(ACTIVE_LOW);
 214   4                                                              EnableInt1();
 215   4                                                              State = START;
 216   4                                                      }
 217   3      
 218   3                                                      break;
 219   3                                              }//End of case DATA:
 220   2      
 221   2                      }//End of Switch State:
 222   1      
 223   1      
 224   1      }
*** WARNING C280 IN LINE 96 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Inte
             -rrupts.c: 'sampleCounter': unreferenced local variable
*** WARNING C280 IN LINE 97 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Inte
             -rrupts.c: 'bitsCounter': unreferenced local variable
*** WARNING C280 IN LINE 98 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Inte
             -rrupts.c: 'buffer': unreferenced local variable
*** WARNING C280 IN LINE 100 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Int
             -errupts.c: 'input': unreferenced local variable
*** WARNING C280 IN LINE 101 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Int
             -errupts.c: 'outputbit': unreferenced local variable
*** WARNING C280 IN LINE 102 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Int
             -errupts.c: 'sample': unreferenced local variable
*** WARNING C280 IN LINE 103 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace\EFM8UB1_Timer0_8bitReload\src\Int
             -errupts.c: 'DataOutput': unreferenced local variable
 225          
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/09/2016 10:40:37 PAGE 5   

 226          
 227          //-----------------------------------------------------------------------------
 228          // Dali TX Timer ISR (TIMER0)
 229          //-----------------------------------------------------------------------------
 230          //
 231          // TIMER0 ISR Content goes here. Remember to clear flag bits:
 232          // TCON::TF0 (Timer 0 Overflow Flag)
 233          //
 234          // Here we process the Timer0 interrupt and toggle the LED when appropriate
 235          //
 236          //-----------------------------------------------------------------------------
 237          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
 238          {
 239   1      
 240   1              ReloadDaliTxTimer(TMH, TML);
 241   1              DaliTxHandler();
 242   1              QueryDaliBus();
 243   1      
 244   1      }
 245          
 246          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    352    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      82
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
